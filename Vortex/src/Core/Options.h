#pragma once
#include <string>
#include <vector>
#include "Core/Math.h"
#include "NeuralNetworks/NetworkSettings.h"
#include "Scene/Nodes/RendererSettings.h"

namespace vtx
{
	enum MdlCallType
	{
		MDL_DIRECT_CALL,
		MDL_INLINE,
		MDL_CUDA
	};

	enum SamplingTechnique;
	enum DisplayBuffer;

	struct Options
	{
		bool        initialized = false;
		int         width;
		int         height;
		std::string windowName;
		std::string dataFolder;
		std::string imGuiIniFile;
		std::string dllPath;
		float       clearColor[4];
		bool isDebug;
		////////////////////////////////////////////////////////////////////////////////////
		/////////////////// Rendering Settings /////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////

		RendererSettings rendererSettings;
		
		WavefrontSettings wavefrontSettings;

		////////////////////////////////////////////////////////////////////////////////////
		/////////////////// Neural Network Options /////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		network::NetworkSettings networkSettings;
		////////////////////////////////////////////////////////////////////////////////////
		/////////////////// Optix Options //////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		int         OptixVersion;
		int         deviceID;
		int         maxDcDepth;
		int         maxTraversableGraphDepth;
		std::string LaunchParamName;
		bool        enableCache;

		////////////////////////////////////////////////////////////////////////////////////
		/////////////////// MDL Options ////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		std::vector<std::string> mdlSearchPath;
		int                      numTextureSpaces;
		int                      numTextureResults;
		bool                     enable_derivatives;
		const char*              mdlOptLevel;
		MdlCallType				 mdlCallType;

		////////////////////////////////////////////////////////////////////////////////////
		/////////////////// Gui Options ////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////
		float       nodeWidth;
		std::string fontPath;
	};

	Options* getOptions();
}
