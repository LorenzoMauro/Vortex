#pragma once
#include <string>

#include "PlottingWrapper.h"
#include "NeuralNetworks/NetworkSettings.h"

namespace vtx
{
	namespace network
	{
		class Network;
		struct GraphsData;
	}
}

namespace vtx::gui
{
	/////////////////////////////////////////////////////////////////////
	//////////////////////// Encoding Settings //////////////////////////
	/////////////////////////////////////////////////////////////////////
	bool encodingSettingsEditorGui(network::EncodingSettings& settings, const std::string& encodedFeatureName);

	void encodingSettingsDisplay(network::EncodingSettings& settings, const std::string& encodedFeatureName);

	/////////////////////////////////////////////////////////////////////
	/////////////////////// Network Input Settings //////////////////////
	/////////////////////////////////////////////////////////////////////
	bool networkInputSettingsEditor(network::InputSettings& settings);

	void networkInputSettingsDisplay(network::InputSettings& settings);

	/////////////////////////////////////////////////////////////////////
	/////////////////////// Path Guding Network /////////////////////////
	/////////////////////////////////////////////////////////////////////

	bool pathGuidingNetworkSettingsEditor(network::PathGuidingNetworkSettings& settings);

	void pathGuidingNetworkSettingsDisplay(network::PathGuidingNetworkSettings& settings);


	/////////////////////////////////////////////////////////////////////
	/////////////////////// SAC Settings ////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	bool sacSettingsEditorGui(network::SacSettings& settings);

	void sacSettingsDisplayGui(network::SacSettings& settings);


	/////////////////////////////////////////////////////////////////////
	/////////////////////// NPG Settings ////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	bool npgSettingsEditorGui(network::NpgSettings& settings);

	void npgSettingsDisplayGui(network::NpgSettings& settings);

	/////////////////////////////////////////////////////////////////////
	/////////////////////// Network Settings ////////////////////////////
	/////////////////////////////////////////////////////////////////////
	
	bool networkSettingsEditorGui(network::NetworkSettings& settings);

	void networkSettingsDisplayGui(network::NetworkSettings& settings);

	/////////////////////////////////////////////////////////////////////
	///////////////////// Plots /////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	std::vector<PlotInfo> ngpPlots(network::GraphsData& graphsData, const network::DistributionType& dt);

	std::vector<PlotInfo> sacPlots(network::GraphsData& graphsData);

	/////////////////////////////////////////////////////////////////////
	///////////////////// Network Editor ////////////////////////////////
	/////////////////////////////////////////////////////////////////////


	std::vector<PlotInfo> neuralNetworkPlots(network::Network& network);
}
